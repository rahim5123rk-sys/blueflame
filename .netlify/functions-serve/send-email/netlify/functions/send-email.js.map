{
  "version": 3,
  "sources": ["../../../../../../Users/raheemkhan/Documents/blue-flame/netlify/functions/send-email.mjs"],
  "sourceRoot": "/var/folders/hm/559wjsqn7y1c1s34pkhtrl080000gn/T/tmp-28421-bZwDqcQWtSov",
  "sourcesContent": ["// This is a Node.js function that will run on Netlify's servers.\n// It acts as a secure intermediary between your website and the Brevo API.\n\nexport const handler = async (event) => {\n  // Only allow POST requests.\n  if (event.httpMethod !== 'POST') {\n    return { statusCode: 405, body: 'Method Not Allowed' };\n  }\n\n  try {\n    // Get the booking data from the request body.\n    const { service_name, booking_date, customer_name, customer_email, customer_phone } = JSON.parse(event.body);\n    \n    // Using the secure environment variable.\n    const BREVO_API_KEY = process.env.BREVO_API_KEY; \n    \n    // If the key is missing on the server, stop with a clear error.\n    if (!BREVO_API_KEY) {\n      console.error(\"Server Error: BREVO_API_KEY is not configured.\");\n      return { statusCode: 500, body: \"Internal Server Error: Email service is not configured.\" };\n    }\n    \n    const SENDER_EMAIL = \"rahim.5123.rk@gmail.com\"; \n    const SENDER_NAME = \"Blue Flame Booking\";\n    const RECIPIENT_EMAIL = \"rahim.5123.rk@gmail.com\";\n\n    // Prepare the data payload for the Brevo API.\n    const emailData = {\n      sender: {\n        name: SENDER_NAME,\n        email: SENDER_EMAIL,\n      },\n      to: [\n        {\n          email: RECIPIENT_EMAIL,\n        },\n      ],\n      replyTo: {\n        email: customer_email,\n        name: customer_name,\n      },\n      subject: `New Booking Request: ${service_name} from ${customer_name}`,\n      htmlContent: `\n        <html>\n          <body>\n            <h1>New Booking Request Received</h1>\n            <h2>Customer Details:</h2>\n            <ul>\n              <li><strong>Name:</strong> ${customer_name}</li>\n              <li><strong>Email:</strong> ${customer_email}</li>\n              <li><strong>Phone:</strong> ${customer_phone}</li>\n            </ul>\n            <hr>\n            <h2>Booking Details:</h2>\n            <ul>\n              <li><strong>Service:</strong> ${service_name}</li>\n              <li><strong>Requested Date:</strong> ${booking_date}</li>\n            </ul>\n            <p>Please contact the customer to confirm the appointment.</p>\n          </body>\n        </html>\n      `,\n    };\n\n    // Make the API call to Brevo using fetch.\n    const response = await fetch('https://api.brevo.com/v3/smtp/email', {\n      method: 'POST',\n      headers: {\n        'accept': 'application/json',\n        'api-key': BREVO_API_KEY,\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify(emailData),\n    });\n\n    // If the email fails to send, return an error.\n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('Brevo API Error:', errorData);\n      return { statusCode: response.status, body: JSON.stringify({ message: 'Failed to send email.' }) };\n    }\n\n    // If the email sends successfully, return a success message.\n    return {\n      statusCode: 200,\n      body: JSON.stringify({ message: 'Email sent successfully!' }),\n    };\n\n  } catch (error) {\n    console.error('Serverless function error:', error);\n    return { statusCode: 500, body: JSON.stringify({ message: 'Internal Server Error.' }) };\n  }\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGO,IAAM,UAAU,OAAO,UAAU;AAEtC,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO,EAAE,YAAY,KAAK,MAAM,qBAAqB;AAAA,EACvD;AAEA,MAAI;AAEF,UAAM,EAAE,cAAc,cAAc,eAAe,gBAAgB,eAAe,IAAI,KAAK,MAAM,MAAM,IAAI;AAG3G,UAAM,gBAAgB,QAAQ,IAAI;AAGlC,QAAI,CAAC,eAAe;AAClB,cAAQ,MAAM,gDAAgD;AAC9D,aAAO,EAAE,YAAY,KAAK,MAAM,0DAA0D;AAAA,IAC5F;AAEA,UAAM,eAAe;AACrB,UAAM,cAAc;AACpB,UAAM,kBAAkB;AAGxB,UAAM,YAAY;AAAA,MAChB,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,MACA,IAAI;AAAA,QACF;AAAA,UACE,OAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA,SAAS;AAAA,QACP,OAAO;AAAA,QACP,MAAM;AAAA,MACR;AAAA,MACA,SAAS,wBAAwB,YAAY,SAAS,aAAa;AAAA,MACnE,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAMwB,aAAa;AAAA,4CACZ,cAAc;AAAA,4CACd,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,8CAKZ,YAAY;AAAA,qDACL,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAM7D;AAGA,UAAM,WAAW,MAAM,MAAM,uCAAuC;AAAA,MAClE,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,UAAU;AAAA,QACV,WAAW;AAAA,QACX,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,KAAK,UAAU,SAAS;AAAA,IAChC,CAAC;AAGD,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,YAAY,MAAM,SAAS,KAAK;AACtC,cAAQ,MAAM,oBAAoB,SAAS;AAC3C,aAAO,EAAE,YAAY,SAAS,QAAQ,MAAM,KAAK,UAAU,EAAE,SAAS,wBAAwB,CAAC,EAAE;AAAA,IACnG;AAGA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,SAAS,2BAA2B,CAAC;AAAA,IAC9D;AAAA,EAEF,SAAS,OAAO;AACd,YAAQ,MAAM,8BAA8B,KAAK;AACjD,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,SAAS,yBAAyB,CAAC,EAAE;AAAA,EACxF;AACF;",
  "names": []
}
